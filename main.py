import os
import json
import logging
import random
import aiohttp
import re
from aiogram import Bot, Dispatcher, Router, F
from aiogram.types import (
    Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup,
    ReplyKeyboardMarkup, KeyboardButton
)
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.filters import Command, CommandStart

logging.basicConfig(level=logging.INFO)

# === –ü–ï–†–ï–ú–ï–ù–ù–´–ï –û–ö–†–£–ñ–ï–ù–ò–Ø ===
BOT_TOKEN = os.getenv("BOT_TOKEN")
CHANNEL_ID = os.getenv("CHANNEL_ID")
DONATE_SBP = os.getenv("DONATE_SBP", "https://example.com")
GOOGLE_SCRIPT_URL = os.getenv("GOOGLE_SCRIPT_URL", "")

bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
router = Router()

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Å—Ç–∞
with open("data/test1.json", "r", encoding="utf-8") as f:
    TEST_DATA = json.load(f)

# FSM
class TestState(StatesGroup):
    answering = State()
    waiting_for_email = State()

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
user_sessions = {}

# === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ===

def escape_markdown_v2(text: str) -> str:
    """–≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã –¥–ª—è MarkdownV2"""
    escape_chars = r'_*[]()~`>#+-=|{}.!'
    return re.sub(r'([%s])' % re.escape(escape_chars), r'\\\1', text)

def get_email_button():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìß –î–∞, —è —Ö–æ—á—É –ø–æ–ª—É—á–∏—Ç—å –≥–∞–π–¥", callback_data="request_email")]
    ])

def get_test_menu_after_email():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üß† –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Ç–µ—Å—Ç", callback_data="back_to_tests")]
    ])

def get_tests_menu():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üíî –¢–∏–ø –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ—Å—Ç–∏", callback_data="test_attachment")],
        [InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
    ])

def get_main_menu():
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="üß† –ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ç–µ—Å—Ç—ã")]],
        resize_keyboard=True,
        one_time_keyboard=False
    )

async def send_to_sheet(action: str, user_id: int, **kwargs):
    if not GOOGLE_SCRIPT_URL:
        return
    try:
        async with aiohttp.ClientSession() as session:
            payload = {"action": action, "user_id": user_id, **kwargs}
            await session.post(GOOGLE_SCRIPT_URL, json=payload)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Google Sheets: {e}")

async def check_subscription(user_id: int) -> bool:
    try:
        member = await bot.get_chat_member(CHANNEL_ID, user_id)
        return member.status in ["member", "administrator", "creator"]
    except:
        return False

# === –•–ï–ù–î–õ–ï–†–´ ===

@router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    user_id = message.from_user.id
    username = message.from_user.username or ""
    referrer_id = None
    if len(message.text.split()) > 1:
        ref = message.text.split()[1]
        if ref.startswith("ref"):
            try:
                referrer_id = int(ref[3:])
                if referrer_id in user_sessions:
                    user_sessions[referrer_id]["friends_completed"] = user_sessions[referrer_id].get("friends_completed", 0) + 1
                    fc = user_sessions[referrer_id]["friends_completed"]
                    if fc == 1:
                        await bot.send_message(referrer_id, "‚úÖ –û–¥–∏–Ω –¥—Ä—É–≥ —É–∂–µ –ø—Ä–æ—à—ë–ª —Ç–µ—Å—Ç! –ñ–¥—ë–º –≤—Ç–æ—Ä–æ–≥–æ ‚Äî –∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –≥–∞–π–¥.")
                    elif fc >= 2:
                        await bot.send_message(
                            referrer_id,
                            "üéâ –î–≤–∞ –¥—Ä—É–≥–∞ –ø—Ä–æ—à–ª–∏ —Ç–µ—Å—Ç! –ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π email, –∏ –º—ã –≤—ã—à–ª–µ–º –≥–∞–π–¥.",
                            reply_markup=get_email_button()
                        )
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ—Ñ–µ—Ä–∞–ª–∞: {e}")
                pass
    user_sessions[user_id] = {
        "score": 0,
        "current_question": 0,
        "done": False,
        "referrer": referrer_id,
        "friends_completed": 0
    }
    ref_link = f"https://t.me/my_psych_tester_bot?start=ref{user_id}"
    await send_to_sheet("new_user", user_id, username=username, ref_link=ref_link)
    if not await check_subscription(user_id):
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url=f"https://t.me/{CHANNEL_ID[1:]}")],
            [InlineKeyboardButton(text="‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_sub")]
        ])
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª, —á—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç ‚ù§Ô∏è", reply_markup=kb)
        return
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", reply_markup=get_main_menu())

@router.message(F.text == "üß† –ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ç–µ—Å—Ç—ã")
async def show_tests(message: Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Å—Ç:", reply_markup=get_tests_menu())

@router.callback_query(F.data == "back_to_menu")
async def back_to_menu(callback: CallbackQuery):
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", reply_markup=get_main_menu())

@router.callback_query(F.data == "back_to_tests")
async def back_to_tests(callback: CallbackQuery):
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Å—Ç:", reply_markup=get_tests_menu())

@router.callback_query(F.data == "test_attachment")
async def start_test(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    fake_count = random.randint(1200, 1500)
    await callback.message.answer(
        f"–í—ã ‚Äî 1 –∏–∑ {fake_count} –ø—Ä–æ—à–µ–¥—à–∏—Ö —Ç–µ—Å—Ç –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ! üåü\n{TEST_DATA['description']}"
    )
    await ask_question(callback.message, user_id, state)

async def ask_question(message: Message, user_id: int, state: FSMContext):
    q_index = user_sessions[user_id]["current_question"]
    if q_index >= len(TEST_DATA["questions"]):
        user_sessions[user_id]["done"] = True
        await state.clear()
        await show_result(message, user_id)
        return
    question = TEST_DATA["questions"][q_index]
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"–ê) {question['options'][0]}", callback_data="ans_0")],
        [InlineKeyboardButton(text=f"–ë) {question['options'][1]}", callback_data="ans_1")],
        [InlineKeyboardButton(text=f"–í) {question['options'][2]}", callback_data="ans_2")],
        [InlineKeyboardButton(text=f"–ì) {question['options'][3]}", callback_data="ans_3")],
        [InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_tests")]
    ])
    await message.answer(f"–í–æ–ø—Ä–æ—Å {q_index + 1} –∏–∑ {len(TEST_DATA['questions'])}:\n{question['text']}", reply_markup=kb)
    if q_index == 0:
        await state.set_state(TestState.answering)

@router.callback_query(TestState.answering)
async def handle_answer(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    data = callback.data
    if data.startswith("ans_"):
        answer_value = int(data.split("_")[1])
        user_sessions[user_id]["score"] += answer_value
        user_sessions[user_id]["current_question"] += 1
        await callback.answer()
        await ask_question(callback.message, user_id, state)
    elif data == "back_to_tests":
        await state.clear()
        await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Å—Ç:", reply_markup=get_tests_menu())

async def show_result(message: Message, user_id: int):
    score = user_sessions[user_id]["score"]
    result = next((r for r in TEST_DATA["results"] if r["min"] <= score <= r["max"]), TEST_DATA["results"][-1])
    ref_link = f"https://t.me/my_psych_tester_bot?start=ref{user_id}"
    call_to_action = f"‚ú® –û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É **2 –¥—Ä—É–∑—å—è–º**:\n{ref_link}\n–ö–æ–≥–¥–∞ –æ–±–∞ –ø—Ä–æ–π–¥—É—Ç —Ç–µ—Å—Ç ‚Äî –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, –∏ –º—ã –≤—ã—à–ª–µ–º –≥–∞–π–¥."
    escaped_title = escape_markdown_v2(result['title'])
    escaped_text = escape_markdown_v2(result['text'])
    escaped_call_to_action = escape_markdown_v2(call_to_action)
    text = f"üíî –í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: *{escaped_title}*\n{escaped_text}\n{escaped_call_to_action}"
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìß –ü–æ–ª—É—á–∏—Ç—å –≥–∞–π–¥", callback_data="request_email")],
        [InlineKeyboardButton(text="üíù –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –∞–≤—Ç–æ—Ä–∞", url=DONATE_SBP)],
        [InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_tests")]
    ])
    try:
        await message.answer(text, reply_markup=kb, parse_mode="MarkdownV2")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

@router.callback_query(F.data == "request_email")
async def request_email(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    friends = user_sessions[user_id].get("friends_completed", 0)
    if friends < 2:
        await callback.message.answer(f"–ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—à—ë–ª(–∏) {friends} –¥—Ä—É–≥(–∞). –ù—É–∂–Ω–æ 2, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –≥–∞–π–¥.")
        return
    await callback.message.answer(
        "üìß –í–≤–µ–¥–∏—Ç–µ –≤–∞—à email:\n"
        "‚úÖ –ù–∞–∂–∏–º–∞—è ¬´–û—Ç–ø—Ä–∞–≤–∏—Ç—å¬ª, –≤—ã –¥–∞—ë—Ç–µ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –§–ó-152.\n"
        "‚ùóÔ∏è –ì–∞–π–¥ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —ç—Ç–æ—Ç email –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞–ø–∫—É ¬´–°–ø–∞–º¬ª, –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–∏ –ø–∏—Å—å–º–æ."
    )
    await state.set_state(TestState.waiting_for_email)

@router.message(TestState.waiting_for_email)
async def handle_email(message: Message, state: FSMContext):
    email = message.text.strip()
    if "@" not in email or "." not in email:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return
    user_id = message.from_user.id
    score = user_sessions.get(user_id, {}).get("score", 0)
    await send_to_sheet("email_submitted", user_id, email=email, score=score)
    await message.answer(
        "–°–ø–∞—Å–∏–±–æ
