import os
import json
import logging
from aiogram import Bot, Dispatcher, Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.filters import Command, CommandStart

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
CHANNEL_ID = os.getenv("CHANNEL_ID")
DONATE_SBP = os.getenv("DONATE_SBP", "https://example.com")  # –∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ—é –°–ë–ü-—Å—Å—ã–ª–∫—É

bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
router = Router()

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ—Å—Ç
with open("data/test1.json", "r", encoding="utf-8") as f:
    TEST_DATA = json.load(f)

# FSM –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–∞
class TestState(StatesGroup):
    answering = State()
    waiting_for_friend = State()

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –ø–∞–º—è—Ç–∏ (–¥–ª—è –¥–µ–º–æ; –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ ‚Äî SQLite)
users = {}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
async def check_subscription(user_id: int) -> bool:
    try:
        member = await bot.get_chat_member(CHANNEL_ID, user_id)
        return member.status in ["member", "administrator", "creator"]
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        return False

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    user_id = message.from_user.id
    referrer_id = None

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
    if message.text and len(message.text.split()) > 1:
        ref = message.text.split()[1]
        if ref.startswith("ref"):
            try:
                referrer_id = int(ref[3:])
                users.setdefault(user_id, {})["referrer"] = referrer_id
            except:
                pass

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    users.setdefault(user_id, {"score": 0, "current_question": 0, "done": False, "got_guide": False})

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    if not await check_subscription(user_id):
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url=f"https://t.me/{CHANNEL_ID[1:]}")],
            [InlineKeyboardButton(text="‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_sub")]
        ])
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª, —á—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç ‚ù§Ô∏è", reply_markup=kb)
        return

    # –ï—Å–ª–∏ —É–∂–µ –ø—Ä–æ—à—ë–ª —Ç–µ—Å—Ç
    if users[user_id]["done"]:
        await show_result(message, user_id)
        return

    # –ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∞
    await message.answer(TEST_DATA["description"])
    await start_question(message, user_id, state)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ –∫–Ω–æ–ø–∫–µ
@router.callback_query(F.data == "check_sub")
async def check_sub(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    if await check_subscription(user_id):
        await callback.message.edit_text("–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É! ‚ù§Ô∏è\n–ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç...")
        await start_question(callback.message, user_id, state)
    else:
        await callback.answer("–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å.", show_alert=True)

# –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–æ–ø—Ä–æ—Å–∞
async def start_question(message: Message, user_id: int, state: FSMContext):
    q_index = users[user_id]["current_question"]
    if q_index >= len(TEST_DATA["questions"]):
        # –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω
        users[user_id]["done"] = True
        await show_result(message, user_id)
        return

    question = TEST_DATA["questions"][q_index]
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"A) {question['options'][0]}", callback_data=f"ans_0")],
        [InlineKeyboardButton(text=f"B) {question['options'][1]}", callback_data=f"ans_1")],
        [InlineKeyboardButton(text=f"C) {question['options'][2]}", callback_data=f"ans_2")],
        [InlineKeyboardButton(text=f"D) {question['options'][3]}", callback_data=f"ans_3")],
    ])
    await message.answer(f"–í–æ–ø—Ä–æ—Å {q_index + 1} –∏–∑ {len(TEST_DATA['questions'])}:\n\n{question['text']}", reply_markup=kb)
    await state.set_state(TestState.answering)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞
@router.callback_query(TestState.answering, F.data.startswith("ans_"))
async def handle_answer(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    answer = int(callback.data.split("_")[1])
    users[user_id]["score"] += answer
    users[user_id]["current_question"] += 1

    await callback.answer()
    await start_question(callback.message, user_id, state)

# –ü–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
async def show_result(message: Message, user_id: int):
    score = users[user_id]["score"]
    result = None
    for r in TEST_DATA["results"]:
        if r["min"] <= score <= r["max"]:
            result = r
            break

    if not result:
        result = TEST_DATA["results"][-1]

    text = f"üíî –í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: **{result['title']}**\n\n{result['text']}\n\n{TEST_DATA['guide_text']}"

    # –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞
    ref_link = f"https://t.me/{(await bot.me).username}?start=ref{user_id}"
    text += f"\n\n‚ú® –•–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å **–ø–æ–¥—Ä–æ–±–Ω—ã–π –≥–∞–π–¥**? –û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É –¥—Ä—É–≥—É:\n{ref_link}\n\n–ö–∞–∫ —Ç–æ–ª—å–∫–æ –¥—Ä—É–≥ –ø—Ä–æ–π–¥—ë—Ç —Ç–µ—Å—Ç ‚Äî –≥–∞–π–¥ –ø—Ä–∏—à–ª—é—Ç –≤–∞–º!"

    # –ö–Ω–æ–ø–∫–∞ –¥–æ–Ω–∞—Ç–∞
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üíù –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –∞–≤—Ç–æ—Ä–∞", url=DONATE_SBP)]
    ])

    await message.answer(text, reply_markup=kb, parse_mode="Markdown")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤)
@router.message(CommandStart())
async def handle_referral(message: Message):
    # –£–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º /start
    pass

# –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫
async def main():
    dp.include_router(router)
    await dp.start_polling(bot)

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
